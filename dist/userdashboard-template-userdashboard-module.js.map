{"version":3,"sources":["webpack:///./src/app/userdashboard-template/userdashboard-template.component.html","webpack:///./src/app/userdashboard-template/userdashboard-template.component.scss","webpack:///./src/app/userdashboard-template/userdashboard-template.component.ts","webpack:///./src/app/userdashboard-template/userdashboard.module.ts","webpack:///./src/app/userdashboard-template/userdashboard.routing.ts"],"names":[],"mappings":"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","file":"userdashboard-template-userdashboard-module.js","sourcesContent":["module.exports = \"\\n<!-- <div *ngIf=\\\"loaded\\\"> -->\\n<div class=\\\"page-content\\\">\\n    <div class=\\\"container-fluid padding-zero position-relative\\\">\\n        <mat-tab-group (selectedIndexChange)=\\\"selectedIndexChange($event)\\\" style=\\\"background: #ffffff; -webkit-box-shadow: 0 3px 5px 0 rgba(0,0,0,.5),0 6px 20px 0 rgba(0,0,0,.19)!important; box-shadow: 0 3px 5px 0 rgba(0,0,0,.5),0 6px 20px 0 rgba(0,0,0,.19)!important; \\\" [selectedIndex]=\\\"selectedIndex\\\">\\n\\n            <mat-tab label=\\\"Twitter\\\">\\n                <ng-template mat-tab-label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"nav-link-in-dash\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-twitter\\\"></i>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTwitter\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n                <br>\\n\\n                <div>\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin: 0 auto; width: 90%\\\">\\n                        <div class=\\\"row header\\\">\\n                            <div class=\\\"col-sm-12\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                    </div>\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                                <mat-select class=\\\"mat-list\\\" style=\\\"width:80%; float: right\\\" (change)=\\\"sort_lists_twitter()\\\" name=\\\"selected_choice\\\"\\n                                                           [(ngModel)]=\\\"selected_choice_twitter\\\"\\n                                                           placeholder=\\\"Sort By\\\">\\n                                                    <mat-option *ngFor=\\\"let choice of choices_twitter\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                    </mat-option>\\n                                                </mat-select>\\n                                            </div>\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_twitter()\\\">\\n                                                    Create List\\n                                                </button>\\n                                            </div>\\n\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n\\n\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n\\n                            <div class=\\\"sortable\\\">\\n                                <section class=\\\"box-typical task-card task\\\">\\n                                    <div class=\\\"task-card-photo\\\">\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\n                                    </div>\\n                                    <div class=\\\"task-card-in\\\">\\n                                       \\n                                        <div class=\\\"task-card-title-label text-center\\\">\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\n                                        </div>\\n                                        <div class=\\\"task-card-title text-center\\\">\\n                                            <!--<div class=\\\"button__holder\\\">-->\\n                                            <!--<button class=\\\"plus\\\"-->\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\n                                            <!--</div>-->\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_twitter(li.id, li.name) \\\">\\n                                                Add Influencers\\n                                            </button>\\n                                        </div>\\n\\n                                    </div>\\n                                    <div class=\\\"task-card-footer\\\">\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_twitter(li.id, li.name)\\\">\\n                                            <i class=\\\"fa fa-edit\\\"></i>\\n                                        </div>\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_twitter(li.id, li.name)\\\">-->\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\n                                        <!--</div>-->\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\n                                        <!---->\\n                                        <!--</div>-->\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_twitter(li.id, li.name)\\\"></i>\\n                                        </div>\\n                                    </div>\\n                                </section>\\n                            </div>\\n                        </div>\\n\\n                        <!--<div *ngFor=\\\"let li of user_lists.results; let i = index\\\"-->\\n                        <!--[ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col purple': i%2===0, 'tasks-grid-col green': i%1===0}\\\">-->\\n                        <!--&lt;!&ndash;<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>&ndash;&gt;-->\\n\\n                        <!--<div class=\\\"sortable\\\">-->\\n                        <!--<section class=\\\"box-typical task-card task\\\">-->\\n                        <!--<div class=\\\"task-card-photo\\\">-->\\n                        <!--&lt;!&ndash;<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">&ndash;&gt;-->\\n                        <!--</div>-->\\n                        <!--<div class=\\\"task-card-in\\\">-->\\n                        <!--<div class=\\\"btn-group task-card-menu\\\">-->\\n                        <!--<button type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\"-->\\n                        <!--aria-expanded=\\\"false\\\">-->\\n                        <!--<i class=\\\"font-icon-dots-vert-square\\\"></i>-->\\n                        <!--</button>-->\\n                        <!--<div class=\\\"dropdown-menu dropdown-menu-right\\\">-->\\n                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"go_to_list_twitter(li.id,li.name)\\\"><i-->\\n                        <!--class=\\\"font-icon font-icon-pencil\\\"></i>Edit</a>-->\\n                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"email_list_twitter(li.id,li.name)\\\"><i-->\\n                        <!--class=\\\"font-icon font-icon-mail\\\"></i>Email</a>-->\\n                        <!--&lt;!&ndash;<a class=\\\"dropdown-item\\\" href=\\\"#\\\"><i class=\\\"font-icon font-icon-archive\\\"></i>Archive</a>&ndash;&gt;-->\\n                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"delete_list_twitter(li.id)\\\"><i-->\\n                        <!--class=\\\"font-icon font-icon-trash\\\"></i>Delete</a>-->\\n                        <!--</div>-->\\n                        <!--</div>-->\\n                        <!--<div class=\\\"task-card-title\\\">-->\\n                        <!--<div class=\\\"button__holder\\\">-->\\n                        <!--&lt;!&ndash;<h2>Hover me &rarr;</h2>&ndash;&gt;-->\\n                        <!--<button class=\\\"plus\\\"-->\\n                        <!--(click)=\\\"select_add_influencers_twitter(li.id,li.name)\\\"></button>-->\\n                        <!--</div>-->\\n                        <!--<br>-->\\n                        <!--<a id=\\\"list_name\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_twitter(li.id,li.name)\\\">{{li.name}}</a>-->\\n                        <!--<span class=\\\"task-card-title-label\\\"></span>-->\\n                        <!--</div>-->\\n\\n                        <!--</div>-->\\n                        <!--<div class=\\\"task-card-footer\\\">-->\\n                        <!--&lt;!&ndash;<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>&ndash;&gt;-->\\n                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_twitter(li.id, li.name)\\\"><i class=\\\"font-icon font-icon-users-group\\\"></i><strong>{{li.influencers_count}}-->\\n                        <!--Influencers</strong></div>-->\\n                        <!--<div class=\\\"avatar-preview avatar-preview-32\\\">-->\\n                        <!--<a href=\\\"#\\\">-->\\n                        <!--&lt;!&ndash;<img src=\\\"img/photo-64-2.jpg\\\" alt=\\\"\\\">&ndash;&gt;-->\\n                        <!--</a>-->\\n                        <!--</div>-->\\n                        <!--</div>-->\\n                        <!--</section>&lt;!&ndash;.task-card&ndash;&gt;-->\\n\\n\\n                        <!--</div>-->\\n                        <!--</div>-->\\n\\n                        <!--.tasks-grid-col-->\\n\\n\\n\\n                    </div><!--.tasks-grid-->\\n\\n                </div>\\n\\n            </mat-tab>\\n\\n            <mat-tab label=\\\"Blogosphere\\\">\\n                <ng-template mat-tab-label>\\n                     <span class=\\\"nav-link-in-dash\\\">\\n                        <i class=\\\"fab fa-blogger\\\"></i>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tBlogosphere\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n                <br>\\n\\n                <div>\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin: 0 auto; width: 90%\\\">\\n                        <div class=\\\"row header\\\">\\n                            <div class=\\\"col-sm-12\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                    </div>\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                                <mat-select (change)=\\\"sort_lists_dd()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\n                                                    <mat-option *ngFor=\\\"let choice of blog_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                    </mat-option>\\n                                                </mat-select>\\n                                            </div>\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_dd()\\\">\\n                                                    Create List\\n                                                </button>\\n                                            </div>\\n\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\n\\n                            <div class=\\\"sortable\\\">\\n                                <section class=\\\"box-typical task-card task\\\">\\n                                    <div class=\\\"task-card-photo\\\">\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\n                                    </div>\\n                                    <div class=\\\"task-card-in\\\">\\n                                       \\n                                        <div class=\\\"task-card-title-label text-center\\\">\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\n                                        </div>\\n                                        <div class=\\\"task-card-title text-center\\\">\\n                                            <!--<div class=\\\"button__holder\\\">-->\\n                                            <!--<button class=\\\"plus\\\"-->\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\n                                            <!--</div>-->\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_dd(li.id, li.name) \\\">\\n                                                Add Influencers\\n                                            </button>\\n                                        </div>\\n\\n                                    </div>\\n                                    <div class=\\\"task-card-footer\\\">\\n                                      \\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_dd(li.id, li.name)\\\">\\n                                            <i class=\\\"fa fa-edit\\\"></i>\\n                                        </div>\\n                                      \\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_dd(li.id, li.name)\\\"></i>\\n                                        </div>\\n                                    </div>\\n                                </section>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </mat-tab>\\n\\n            <mat-tab label=\\\"Youtube\\\">\\n                <ng-template mat-tab-label>\\n                     <span class=\\\"nav-link-in-dash\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-youtube\\\"></i>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tYoutube\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n                <br>\\n\\n                <div>\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin: 0 auto; width: 90%\\\">\\n                        <div class=\\\"row header\\\">\\n                            <div class=\\\"col-sm-12\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                    </div>\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <div class=\\\"row\\\">\\n\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                                <mat-select (change)=\\\"sort_lists_yt()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\n                                                    <mat-option *ngFor=\\\"let choice of youtube_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                    </mat-option>\\n                                                </mat-select>\\n                                            </div>\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_yt()\\\">\\n                                                    Create List\\n                                                </button>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\n\\n                            <div class=\\\"sortable\\\">\\n                                <section class=\\\"box-typical task-card task\\\">\\n                                    <div class=\\\"task-card-photo\\\">\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\n                                    </div>\\n                                    <div class=\\\"task-card-in\\\">\\n\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\n                                        </div>\\n                                        <div class=\\\"task-card-title text-center\\\">\\n                                            <!--<div class=\\\"button__holder\\\">-->\\n                                            <!--<button class=\\\"plus\\\"-->\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\n                                            <!--</div>-->\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_yt(li.id, li.name) \\\">\\n                                                Add Influencers\\n                                            </button>\\n                                        </div>\\n\\n                                    </div>\\n                                    <div class=\\\"task-card-footer\\\">\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_yt(li.id, li.name)\\\">\\n                                            <i class=\\\"fa  fa-edit\\\"></i>\\n                                        </div>\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_yt(li.id, li.name)\\\">-->\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\n                                        <!--</div>-->\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\n                                        <!---->\\n                                        <!--</div>-->\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_yt(li.id, li.name)\\\"></i>\\n                                        </div>\\n                                    </div>\\n                                </section>\\n                            </div>\\n                        </div>\\n\\n                        <!--.tasks-grid-col-->\\n                        <!--<div class=\\\"sh-n-table row\\\" >-->\\n                            <!--<table>-->\\n                                <!--<thead>-->\\n                                <!--<tr>-->\\n                                    <!--<th>List Name</th>-->\\n                                    <!--<th>Total Influencers</th>-->\\n                                    <!--<th>Add Influencers</th>-->\\n                                    <!--<th>Edit</th>-->\\n                                    <!--<th>Email</th>-->\\n                                    <!--<th>Delete</th>-->\\n                                <!--</tr>-->\\n                                <!--</thead>-->\\n                                <!--<tbody >-->\\n                                <!--<tr *ngFor=\\\"let li of user_lists.results;let i=index\\\">-->\\n                                    <!--<td>-->\\n                                        <!--<a style=\\\"font-size: 17px;\\\" (click)=\\\"go_to_list_yt(li.id,li.name)\\\">-->\\n                                            <!--{{li.name }}-->\\n                                        <!--</a>-->\\n                                    <!--</td>-->\\n                                    <!--<td >-->\\n                                        <!--<span class=\\\"block-ellipsis\\\"> {{li.influencers_count}}</span>-->\\n                                    <!--</td>-->\\n                                    <!--<td title=\\\"Click to add influencers in this list\\\">-->\\n                                        <!--<a (click)=\\\"select_add_influencers_yt(li.id,li.name)\\\">-->\\n                                            <!--<i class=\\\"fab fa-plus\\\" ></i>-->\\n\\n                                        <!--</a>-->\\n                                    <!--</td>-->\\n                                    <!--<td  title=\\\"Click to Edit this list\\\">-->\\n                                        <!--<a (click)=\\\"go_to_list_yt(li.id,li.name)\\\">-->\\n                                            <!--<i class=\\\"fab fa-pencil\\\" ></i>-->\\n                                        <!--</a>-->\\n                                    <!--</td>-->\\n                                    <!--<td title=\\\"Click to Email this Infleuncer\\\">-->\\n                                        <!--<a (click)=\\\"email_list_yt(li.id,li.name)\\\">-->\\n                                            <!--<i class=\\\"fab fa-envelope\\\" ></i>-->\\n                                        <!--</a>-->\\n                                    <!--</td>-->\\n                                    <!--<td title=\\\"Click to Delete this influencer\\\">-->\\n                                        <!--<a (click)=\\\"delete_list_yt(li.id)\\\">-->\\n                                            <!--<i class=\\\"fab fa-trash\\\" ></i>-->\\n                                        <!--</a>-->\\n                                    <!--</td>-->\\n                                <!--</tr>-->\\n                                <!--</tbody>-->\\n                            <!--</table>-->\\n                        <!--</div>-->\\n                    </div><!--.tasks-grid--></div>\\n\\n\\n            </mat-tab>\\n            <mat-tab label=\\\"Instagram\\\">\\n                <ng-template mat-tab-label>\\n                     <span class=\\\"nav-link-in-dash\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-instagram\\\"></i>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tInstagram\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n                <br>\\n\\n                <div>\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin:0 auto; width: 90%\\\">\\n                        <div class=\\\"row header\\\">\\n                            <div class=\\\"col-sm-12\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                    </div>\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                                <mat-select (change)=\\\"sort_lists_in()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\n                                                    <mat-option *ngFor=\\\"let choice of insta_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                    </mat-option>\\n                                                </mat-select>\\n                                            </div>\\n\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_in()\\\">\\n                                                    Create List\\n                                                </button>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\n\\n                            <div class=\\\"sortable\\\">\\n                                <section class=\\\"box-typical task-card task\\\">\\n                                    <div class=\\\"task-card-photo\\\">\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\n                                    </div>\\n                                    <div class=\\\"task-card-in\\\">\\n\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\n                                        </div>\\n                                        <div class=\\\"task-card-title text-center\\\">\\n                                            <!--<div class=\\\"button__holder\\\">-->\\n                                            <!--<button class=\\\"plus\\\"-->\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\n                                            <!--</div>-->\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-priamry\\\" (click)=\\\"select_add_influencers_in(li.id, li.name) \\\">\\n                                                Add Influencers\\n                                            </button>\\n                                        </div>\\n\\n                                    </div>\\n                                    <div class=\\\"task-card-footer\\\">\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_in(li.id, li.name)\\\">\\n                                            <i class=\\\"fa  fa-edit\\\"></i>\\n                                        </div>\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_in(li.id, li.name)\\\">-->\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\n                                        <!--</div>-->\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\n                                        <!---->\\n                                        <!--</div>-->\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_in(li.id, li.name)\\\"></i>\\n                                        </div>\\n                                    </div>\\n                                </section>\\n                            </div>\\n                        </div>\\n\\n\\n                    </div><!--.tasks-grid-->\\n                </div>\\n\\n\\n            </mat-tab>\\n            <!--<p>For Facebook</p> -->\\n\\n\\n            <mat-tab label=\\\"Facebook\\\">\\n                <ng-template mat-tab-label>\\n                     <span class=\\\"nav-link-in-dash\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-facebook\\\"></i>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFacebook\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n                <br>\\n\\n                <div>\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 0 auto\\\">\\n                        <div class=\\\"row header\\\">\\n                            <div class=\\\"col-sm-12\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                    </div>\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                                <mat-select (change)=\\\"sort_lists_fb()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\n                                                    <mat-option *ngFor=\\\"let choice of facebook_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                    </mat-option>\\n                                                </mat-select>\\n                                            </div>\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_fb()\\\">\\n                                                    Create List\\n                                                </button>\\n                                            </div>\\n\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\n\\n                            <div class=\\\"sortable\\\">\\n                                <section class=\\\"box-typical task-card task\\\">\\n                                    <div class=\\\"task-card-photo\\\">\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\n                                    </div>\\n                                    <div class=\\\"task-card-in\\\">\\n\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\n                                        </div>\\n                                        <div class=\\\"task-card-title text-center\\\">\\n                                            <!--<div class=\\\"button__holder\\\">-->\\n                                            <!--<button class=\\\"plus\\\"-->\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\n                                            <!--</div>-->\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-priamry\\\" (click)=\\\"select_add_influencers_fb(li.id, li.name) \\\">\\n                                                Add Influencers\\n                                            </button>\\n                                        </div>\\n\\n                                    </div>\\n                                    <div class=\\\"task-card-footer\\\">\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_fb(li.id, li.name)\\\">\\n                                            <i class=\\\"fa  fa-edit\\\"></i>\\n                                        </div>\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\n                                        <!--</div>-->\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\n                                        <!---->\\n                                        <!--</div>-->\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_fb(li.id, li.name)\\\"></i>\\n                                        </div>\\n                                    </div>\\n                                </section>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n\\n            </mat-tab>\\n\\n\\n            <!-- <mat-tab label=\\\"linkedIn\\\">\\n                <ng-template mat-tab-label>\\n                     <span class=\\\"nav-link-in-dash\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-linkedin\\\"></i>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tLinkedin\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n                <br>\\n\\n                <div>\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin: 0 auto; width: 90%\\\">\\n                        <div class=\\\"row header\\\">\\n                            <div class=\\\"col-sm-12\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                    </div>\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                                <mat-select (change)=\\\"sort_list_lnkd()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\n                                                    <mat-option *ngFor=\\\"let choice of linkedin_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                    </mat-option>\\n                                                </mat-select>\\n                                            </div>\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_lnkd()\\\">\\n                                                    Create List\\n                                                </button>\\n                                            </div>\\n\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n                            \\n                            <div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>\\n\\n                            <div class=\\\"sortable\\\">\\n                                <section class=\\\"box-typical task-card task\\\">\\n                                    <div class=\\\"task-card-photo\\\">\\n                                        <img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">\\n                                    </div>\\n                                    <div class=\\\"task-card-in\\\">\\n\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\n                                            <h6 style=\\\"font-weight: bolder\\\">{{li.name}}</h6>\\n                                        </div>\\n                                        <div class=\\\"task-card-title text-center\\\">\\n\\n                                            <div class=\\\"button__holder\\\">\\n                                            <button class=\\\"plus\\\"\\n                                            (click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>\\n                                            </div>\\n\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_lnkd(li.id, li.name) \\\">\\n                                                Add Influencers\\n                                            </button>\\n                                        </div>\\n\\n                                    </div>\\n                                    <div class=\\\"task-card-footer\\\">\\n                                        \\n                                        <div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>\\n                                        \\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_lnkd(li.id, li.name)\\\">\\n                                            <i class=\\\"fa  fa-edit\\\"></i>\\n                                        </div>\\n                                        \\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">\\n                                            <i class=\\\"fab fa-envelope\\\"></i>\\n                                        </div>\\n                                        <div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">\\n                                        \\n                                        </div>\\n                                        \\n                                        \\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                            <i class=\\\"fab fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_lnkd(li.id, li.name)\\\"></i>\\n                                        </div>\\n                                    </div>\\n                                </section>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    .tasks-grid\\n                </div>\\n\\n\\n            </mat-tab> -->\\n\\n\\n            <!--  For Pinterest Coded by Amjad-->\\n            <mat-tab label=\\\"Pinterest\\\">\\n                <ng-template mat-tab-label>\\n                     <span class=\\\"nav-link-in-dash\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-pinterest \\\"></i>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPinterest\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n                <br>\\n\\n                <div>\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 0 auto\\\">\\n                        <div class=\\\"row header\\\">\\n                            <div class=\\\"col-sm-12\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                    </div>\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                                <mat-select (change)=\\\"sort_list_pt()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\n                                                    <mat-option *ngFor=\\\"let choice of pint_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                    </mat-option>\\n                                                </mat-select>\\n                                            </div>\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_pt()\\\">\\n                                                    Create List\\n                                                </button>\\n                                            </div>\\n                                        </div>\\n\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\n\\n                            <div class=\\\"sortable\\\">\\n                                <section class=\\\"box-typical task-card task\\\">\\n                                    <div class=\\\"task-card-photo\\\">\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\n                                    </div>\\n                                    <div class=\\\"task-card-in\\\">\\n\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\n                                        </div>\\n                                        <div class=\\\"task-card-title text-center\\\">\\n                                            <!--<div class=\\\"button__holder\\\">-->\\n                                            <!--<button class=\\\"plus\\\"-->\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\n                                            <!--</div>-->\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-priamry\\\" (click)=\\\"select_add_influencers_pt(li.id, li.name) \\\">\\n                                                Add Influencers\\n                                            </button>\\n                                        </div>\\n\\n                                    </div>\\n                                    <div class=\\\"task-card-footer\\\">\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_pt(li.id, li.name)\\\">\\n                                            <i class=\\\"fa  fa-edit\\\"></i>\\n                                        </div>\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\n                                        <!--</div>-->\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\n                                        <!---->\\n                                        <!--</div>-->\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_pt(li.id, li.name)\\\"></i>\\n                                        </div>\\n                                    </div>\\n                                </section>\\n                            </div>\\n                        </div>\\n                    </div><!--.tasks-grid-->\\n                </div>\\n\\n\\n            </mat-tab>\\n            <mat-tab label=\\\"Periscope\\\">\\n                <ng-template mat-tab-label>\\n                     <span class=\\\"nav-link-in-dash\\\">\\n                         <img src=\\\"../../assets/img/periscope_24 (1).png\\\">\\n                         Periscope\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n\\n\\n                <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 28px auto 20px auto \\\">\\n                    <div class=\\\"row header\\\">\\n                        <div class=\\\"col-sm-12\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                </div>\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                            <mat-select (change)=\\\"sort_lists_peri()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\n                                                       placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\n                                                <mat-option *ngFor=\\\"let choice of periscope_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                </mat-option>\\n                                            </mat-select>\\n                                        </div>\\n                                        <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_peri()\\\">\\n                                                Create List\\n                                            </button>\\n                                        </div>\\n                                    </div>\\n\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n                        <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\n\\n                        <div class=\\\"sortable\\\">\\n                            <section class=\\\"box-typical task-card task\\\">\\n                                <div class=\\\"task-card-photo\\\">\\n                                    <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\n                                </div>\\n                                <div class=\\\"task-card-in\\\">\\n\\n                                    <div class=\\\"task-card-title-label text-center\\\">\\n                                        <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\n                                    </div>\\n                                    <div class=\\\"task-card-title text-center\\\">\\n                                        <!--<div class=\\\"button__holder\\\">-->\\n                                        <!--<button class=\\\"plus\\\"-->\\n                                        <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\n                                        <!--</div>-->\\n                                        <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                        <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-priamry\\\" (click)=\\\"select_add_influencers_peri(li.id, li.name) \\\">\\n                                            Add Influencers\\n                                        </button>\\n                                    </div>\\n\\n                                </div>\\n                                <div class=\\\"task-card-footer\\\">\\n                                    <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\n                                    <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_peri(li.id, li.name)\\\">\\n                                        <i class=\\\"fa  fa-edit\\\"></i>\\n                                    </div>\\n                                    <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\n                                        <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\n                                    <!--</div>-->\\n                                    <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\n                                    <!---->\\n                                    <!--</div>-->\\n                                    <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                        <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_peri(li.id, li.name)\\\"></i>\\n                                    </div>\\n                                </div>\\n                            </section>\\n                        </div>\\n                    </div>\\n\\n                </div>\\n            </mat-tab>\\n\\n            <mat-tab label=\\\"Periscope\\\">\\n                <ng-template mat-tab-label>\\n                     <span class=\\\"nav-link-in-dash\\\">\\n                         <img src=\\\"../../assets/img/medium.png\\\">\\n                         <!-- <i class=\\\"fab fa-medium\\\"></i> -->\\n                         Medium\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n\\n\\n                <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 28px auto 20px auto \\\">\\n                    <div class=\\\"row header\\\">\\n                        <div class=\\\"col-sm-12\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                </div>\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                            <mat-select (change)=\\\"sort_lists_med()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\n                                                        placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\n                                                <mat-option *ngFor=\\\"let choice of medium_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                </mat-option>\\n                                            </mat-select>\\n                                        </div>\\n                                        <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_med()\\\">\\n                                                Create List\\n                                            </button>\\n                                        </div>\\n                                    </div>\\n\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n                        <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\n\\n                        <div class=\\\"sortable\\\">\\n                            <section class=\\\"box-typical task-card task\\\">\\n                                <div class=\\\"task-card-photo\\\">\\n                                    <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\n                                </div>\\n                                <div class=\\\"task-card-in\\\">\\n\\n                                    <div class=\\\"task-card-title-label text-center\\\">\\n                                        <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\n                                    </div>\\n                                    <div class=\\\"task-card-title text-center\\\">\\n                                        <!--<div class=\\\"button__holder\\\">-->\\n                                        <!--<button class=\\\"plus\\\"-->\\n                                        <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\n                                        <!--</div>-->\\n                                        <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                        <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_med(li.id, li.name) \\\">\\n                                            Add Influencers\\n                                        </button>\\n                                    </div>\\n\\n                                </div>\\n                                <div class=\\\"task-card-footer\\\">\\n                                    <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\n                                    <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_med(li.id, li.name)\\\">\\n                                        <i class=\\\"fa  fa-edit\\\"></i>\\n                                    </div>\\n                                    <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\n                                        <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\n                                    <!--</div>-->\\n                                    <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\n                                    <!---->\\n                                    <!--</div>-->\\n                                    <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                        <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_med(li.id, li.name)\\\"></i>\\n                                    </div>\\n                                </div>\\n                            </section>\\n                        </div>\\n                    </div>\\n\\n                </div>\\n            </mat-tab>\\n            <mat-tab label=\\\"Flickr\\\">\\n                <ng-template mat-tab-label>\\n                     <span class=\\\"nav-link-in-dash\\\">\\n                         <img src=\\\"../../assets/img/flickr_32.png\\\">\\n                         <!-- <i class=\\\"fab fa-flickr\\\"></i> -->\\n                         Flickr\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\n                </ng-template>\\n\\n\\n                <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 28px auto 20px auto \\\">\\n                    <div class=\\\"row header\\\">\\n                        <div class=\\\"col-sm-12\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-md-6\\\">\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\n                                        </span>\\n                                </div>\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\n                                            <mat-select (change)=\\\"sort_lists_fli()\\\"  name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\n                                                        placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\n                                                <mat-option *ngFor=\\\"let choice of choices_flicker\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\n                                                </mat-option>\\n                                            </mat-select>\\n                                        </div>\\n                                        <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_flkr()\\\">\\n                                                Create List\\n                                            </button>\\n                                        </div>\\n                                    </div>\\n\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n\\n                    <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\n                        <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\n\\n                        <div class=\\\"sortable\\\">\\n                            <section class=\\\"box-typical task-card task\\\">\\n                                <div class=\\\"task-card-photo\\\">\\n                                    <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\n                                </div>\\n                                <div class=\\\"task-card-in\\\">\\n\\n                                    <div class=\\\"task-card-title-label text-center\\\">\\n                                        <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\n                                    </div>\\n                                    <div class=\\\"task-card-title text-center\\\">\\n                                        <!--<div class=\\\"button__holder\\\">-->\\n                                        <!--<button class=\\\"plus\\\"-->\\n                                        <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\n                                        <!--</div>-->\\n                                        <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\n                                        <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_flkr(li.id, li.name) \\\">\\n                                            Add Influencers\\n                                        </button>\\n                                    </div>\\n\\n                                </div>\\n                                <div class=\\\"task-card-footer\\\">\\n                                    <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\n                                    <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_flkr(li.id, li.name)\\\">\\n                                        <i class=\\\"fa  fa-edit\\\"></i>\\n                                    </div>\\n                                    <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\n                                        <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\n                                    <!--</div>-->\\n                                    <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\n                                    <!---->\\n                                    <!--</div>-->\\n                                    <div class=\\\"avatar-preview avatar-preview-32\\\">\\n                                        <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_flkr(li.id, li.name)\\\"></i>\\n                                    </div>\\n                                </div>\\n                            </section>\\n                        </div>\\n                    </div>\\n\\n                </div>\\n            </mat-tab>\\n        </mat-tab-group>\\n      <!-- ...................................................................... -->\\n        <preloader-small></preloader-small>\\n    </div>\\n</div>\\n<!--  -->\"","module.exports = \"@import url(https://fonts.googleapis.com/css?family=Source+Sans+Pro:300);\\n.button__holder{position:relative;width:100%;height:100%;display:flex;flex-wrap:wrap;align-items:center;justify-content:center}\\n.button__holder:after{content:\\\"\\\";position:absolute;z-index:0;top:0;right:0;bottom:0;left:0}\\n.button__holder h2{margin-right:1em;text-align:center;color:#79CDCD}\\n.plus{position:relative;z-index:1;width:80px;height:80px;background:#262626;border-radius:50%;border:none;transition:box-shadow 400ms cubic-bezier(0.2, 0, 0.7, 1),-webkit-transform 200ms cubic-bezier(0.2, 0, 0.7, 1);transition:box-shadow 400ms cubic-bezier(0.2, 0, 0.7, 1),transform 200ms cubic-bezier(0.2, 0, 0.7, 1);transition:box-shadow 400ms cubic-bezier(0.2, 0, 0.7, 1),transform 200ms cubic-bezier(0.2, 0, 0.7, 1),-webkit-transform 200ms cubic-bezier(0.2, 0, 0.7, 1)}\\n.plus:after{content:\\\"+\\\";font-size:5em;line-height:1.1em;color:white}\\n.plus:hover{box-shadow:0 0 1px 10px rgba(13,13,13,0.16),0 0 1px 20px rgba(56,50,50,0.1),0 0 1px 30px rgba(0,0,0,0.1)}\\n#list_name{font-size:16px;font-weight:700;color:#c00;text-transform:capitalize}\\n.mat-tab-labels{background-color:#FFFFFF}\\n.sh-n-table table thead tr th{background:#000;color:#fff;text-align:center;border-right:1px solid;font-size:16px;padding:5px 0;box-shadow:0 3px 5px 0 rgba(0,0,0,0.5),0 6px 20px 0 rgba(0,0,0,0.19) !important}\\n.sh-n-table table tbody tr td{width:300px;padding:5px 10px;cursor:pointer;vertical-align:middle;text-align:center;font-size:.9em;font-weight:400;color:#000;border:none !important;border-bottom:1px solid #ccc !important}\\n.sh-n-table table tbody tr td a{cursor:pointer}\\n.crete-list-button{background:linear-gradient(90deg, #a91f73 0, #ff4270 100%);color:#fff;border-radius:50px;margin:17px !important}\\n.crete-list-button:hover{color:#fff}\\n.tasks-grid .header .tasks-grid-col-title{display:block;padding:11px 0px 11px 0px}\\n.select-mat-list{padding-top:5px !important;border-bottom:1px solid #ccc}\\n.task-card-title-label h5{padding-top:13px;color:#6991c5;text-transform:capitalize;font-weight:600}\\n.task-card-footer{display:flex;justify-content:center}\\n.task-card-meta-item{cursor:pointer;padding:5px;color:#6991c5}\\n.avatar-preview-32{color:#d66464;padding:5px;cursor:pointer}\\n.avatar-preview-32:hover{color:#c00}\\n.sh-n-table table tbody tr td:first-child{color:#c00;cursor:pointer}\\ni{font-size:18px}\\n.btn-rounded{background:#000;color:#fff;text-align:center;margin-top:3%;font-size:17px;box-shadow:0 3px 5px 0 rgba(0,0,0,0.5),0 6px 20px 0 rgba(0,0,0,0.19) !important}\\n.list-name{color:black;font-size:18px}\\nlabel{color:black;font-size:17px;font-weight:600}\\n.mat-list{border-bottom:1px solid #ccc}\\na{cursor:pointer}\\nmat-tab-header{background:#fff !important}\\n.nav-link-in-dash{font-size:16px;font-weight:bold;color:#000}\\n.fa-globe{color:#0b29ff}\\n.fa-twitter{color:#1da5de}\\n.fa-newspaper{color:#ff4900}\\n.fa-youtube{color:#d20008}\\n.fa-instagram{color:#ff0043}\\n.fa-facebook{color:#345396}\\n.fa-pinterest{color:#d80007}\\n.list_social{background:#fff;margin:10px 0;padding:10px;position:fixed;z-index:9;width:98%;top:51px;left:auto;right:auto}\\n.list_social ul{display:flex;width:100%;margin:0;justify-content:space-evenly;align-items:center}\\n.list_social ul li a{padding:10px}\\n.page-content{background:#fff}\\n.page-content .content_social{margin-top:70px}\\n.page-content i{margin-right:5px}\\n.page-content .font-22{font-size:22px}\\n.page-content .header_row{background:#fff;border-bottom:1px solid #Ccc}\\n.page-content .box-typical{border:none;margin:0}\\n.page-content .addinfluance{width:200px;border:1px solid #ccc;margin:10px}\\n.page-content .sectionFor{border:1px solid #ccc;border-radius:5px}\\n\"","import {Component, OnInit} from '@angular/core';\nimport {HttpService} from '../services/http-service';\nimport Swal from 'sweetalert2';\nimport {Headers, Response, Http} from '@angular/http';\nimport {User} from '../_models/index';\nimport {Config} from '../../config';\nimport {Router} from '@angular/router';\n\n@Component({\n    selector: 'app-userdashboard-template',\n    templateUrl: './userdashboard-template.component.html',\n    styleUrls: ['./userdashboard-template.component.scss']\n})\nexport class UserdashboardTemplateComponent implements OnInit {\n    currentUser: User;\n    user_lists;\n    user_lists_web;\n    selectedIndex;\n    current_dashboard: number = 1;\n    loaded: boolean = false;\n    selected_choice = '-id';\n    pint_choices = [\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-pinterest_influencer', name: 'Number of influencers - DSC'},\n        {code: 'pinterest_influencer', name: 'Number of influencers - ASC'},\n        // {code: 'AL', name: 'Alabama'},\n    ];\n    youtube_choices = [\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-youtube_influencer', name: 'Number of influencers - DSC'},\n        {code: 'youtube_influencer', name: 'Number of influencers - ASC'},\n        // {code: 'AL', name: 'Alabama'},\n    ];\n    periscope_choices=[\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-periscope_influencer', name: 'Number of influencers - DSC'},\n        {code: 'periscope_influencer', name: 'Number of influencers - ASC'},\n    ];\n\n    medium_choices=[\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-medium_influencer', name: 'Number of influencers - DSC'},\n        {code: 'medium_influencer', name: 'Number of influencers - ASC'},\n    ];\n    insta_choices = [\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-instagram_influencer', name: 'Number of influencers - DSC'},\n        {code: 'instagram_influencer', name: 'Number of influencers - ASC'},\n        // {code: 'AL', name: 'Alabama'},\n    ];\n    facebook_choices = [\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-facebook_influencer', name: 'Number of influencers - DSC'},\n        {code: 'facebook_influencer', name: 'Number of influencers - ASC'},\n        // {code: 'AL', name: 'Alabama'},\n    ];\n    linkedin_choices = [\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-linkedin_influencer', name: 'Number of influencers - DSC'},\n        {code: 'linkedin_influencer', name: 'Number of influencers - ASC'},\n        // {code: 'AL', name: 'Alabama'},\n    ];\n    blog_choices = [\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-blog_influencer', name: 'Number of influencers - DSC'},\n        {code: 'blog_influencer', name: 'Number of influencers - ASC'},\n        // {code: 'AL', name: 'Alabama'},\n    ];\n    choices_flicker = [\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-flickr_influencer', name: 'Number of influencers - DSC'},\n        {code: 'flickr_influencer', name: 'Number of influencers - ASC'},\n        // {code: 'AL', name: 'Alabama'},\n    ];\n    selected_choice_twitter = '-id';\n    choices_twitter = [\n        {code: 'name', name: 'Name - Ascending'},\n        {code: '-name', name: 'Name - Descending'},\n        {code: '-created_at', name: 'Newest'},\n        {code: 'created_at', name: 'Oldest'},\n        {code: '-twitter_influencer', name: 'Number of influencers - DSC'},\n        {code: 'twitter_influencer', name: 'Number of influencers - ASC'},\n        // {code: 'AL', name: 'Alabama'},\n    ];\n    constructor(private http: HttpService, private router: Router) {}\n\n    ngOnInit() {\n\n        window.scroll(0,0)\n        this.currentUser = JSON.parse(localStorage.getItem('currentUser'));\n\n        this.get_lists(this.selected_choice);\n    }\n\n    // // Start Dashboard Web all API's Implements by Amjad\n\n    //         //Function that add influencers in web lists.\n    // select_add_influencers(id: number, name: string, dashboard) {\n\n    //     localStorage.setItem('selected_list', JSON.stringify({id: id, name: name}));\n    //     // this.router.navigate(['multi/search'],{queryParams: {name: 'web'}})\n    //     this.router.navigate(['multi/search']);\n\n    // }\n    //         // Function that fo to current web lists where you can edit the list.\n    // go_to_list(e: number, name: string, dashboard) {\n    //     this.router.navigate(['blogs/list/', e])\n\n    // }\n    //         //Send Email to Influencer's\n    // email_list(e: number, name: string, dashboard) {\n    //     // localStorage.setItem('navigated_list',JSON.stringify({id:e,name:name}));\n    //     // if (dashboard === 1) {\n    //     //\n    //     // } else if (dashboard === 2) {\n    //     //     this.router.navigate(['email/settings/', e])\n    //     //\n    //     // } else if (dashboard === 6) {\n    //     this.router.navigate(['email/settings/', e])\n    //     //\n    //     // }\n    // }\n    //     //Delete any Web list by clicking pencil Icons\n    // delete_list(id: number) {\n\n    //     let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n    //     headers.append('Content-Type', 'application/json');\n    //     let myhttp = this.http;\n    //     Swal.fire({\n    //         // title: 'Are you sure?',\n    //         title: 'Deleted',\n    //         // text: 'You will not be able to recover this list!',\n    //         text: 'List has been deleted successfully',\n    //         // type: 'warning',\n    //         // showCancelButton: true,\n    //         // confirmButtonText: 'Yes, delete it!',\n    //         // cancelButtonText: 'No, keep it'\n    //     }).then(() => {\n\n    //         myhttp.delete(Config.api + '/delete_ilist/' + id,\n    //             {headers: headers}).map((response: Response) => response.json()).subscribe(\n    //             data => {\n    //                 this.get_lists(this.selected_choice);\n\n    //                 // Swal.fire(\n    //                 //     'List Deleted!',\n    //                 //     '',\n    //                 //     'success'\n    //                 // )\n\n    //             },\n    //             error => {\n    //                 // alert('error')\n    //                 Swal.fire(\n    //                     'Try again after some time!',\n    //                     // error.toString(),\n    //                     'error'\n    //                 )\n    //             });\n    //     }, function (dismiss) {\n    //         // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n    //         if (dismiss === 'cancel') {\n    //             Swal.fire(\n    //                 'Cancelled',\n    //                 'Your list is not deleted :)',\n    //                 'error'\n    //             )\n    //         }\n    //     })\n\n\n    // }\n\n    //Sort Lists of web\n    // sort_lists() {\n    //     this.get_lists(this.selected_choice);\n    // }\n       // Create New Lists of Web\n    // create_empty_list() {\n\n    //     Swal.fire({\n    //         title: 'Enter the name of list',\n    //         text: 'New list will be created',\n    //         type: 'question',\n    //         input: 'text',\n    //         preConfirm: (result) => {\n    //             return new Promise((resolve, reject) => {\n    //                 setTimeout(() => {\n    //                     if (result === '') {\n    //                         reject('List name cannot be empty')\n    //                     } else if (result.length > 30) {\n    //                         reject('Length of list name cannot be greater than 30')\n    //                     }\n    //                     else {\n    //                         let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n    //                         headers.append('Content-Type', 'application/json');\n\n    //                         this.http.post(Config.api + '/check_ilist/', JSON.stringify({\n    //                                 name: result,\n    //                                 username: this.currentUser.username\n    //                             }),\n    //                             {headers: headers}).map((response: Response) => response.json()).subscribe(\n    //                             data => {\n    //                                 resolve()\n\n    //                             },\n    //                             error => {\n    //                                 if(error.status===406){\n    //                                     Swal.fire(\"List Already Exist\")\n    //                                 }\n    //                                 // reject('List named \"' + result + '\" already exists')\n\n    //                             });\n    //                     }\n    //                 }, )\n    //             }\n\n\n\n    //             )\n    //         },\n    //         showCancelButton: true,\n    //         confirmButtonText: 'Create',\n    //         cancelButtonText: 'Cancel'\n    //     }).then((result) => {\n    //     // //alert(result.value);\n    //         let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n    //         headers.append('Content-Type', 'application/json');\n\n    //         this.http.post(Config.api + '/create_add_ilist/', JSON.stringify({\n    //                 name: result.value,\n    //                 list: {},\n    //                 username: this.currentUser.username\n    //             }),\n    //             {headers: headers}).map((response: Response) => response.json()).subscribe(\n    //             data => {\n    //                 this.get_lists(this.selected_choice);\n    //                 Swal.fire(\n    //                     'List created!',\n    //                     result.value(),\n    //                     'success'\n    //                 )\n    //                 console.log('Result is..................', result.value);\n\n    //             },\n    //             // error => {\n    //             //     Swal.fire(\n    //             //         'Try again after some time!',\n    //             //         error.toString(),\n    //             //         'error'\n    //             //     )\n    //             // }\n    //             );\n\n    //     }, function (dismiss) {\n    //         // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n    //         if (dismiss === 'cancel') {\n    //             Swal.fire(\n    //                 'Cancelled',\n    //                 'No list created :)',\n    //                 'success'\n    //             )\n    //         }\n    //     })\n    // }\n\n                        //Start Twitter all API's Implements by Amjad\n\n\n    create_empty_list_twitter() {\n        // let dashboard = this.current_dashboard;\n        //\n        // if (dashboard === 1) {\n        //     this.create_empty_list()\n        // }\n        // else if (dashboard === 6) {\n        //     this.create_empty_list_dd()\n        // }\n        // else if (dashboard === 2) {\n        Swal.fire({\n            title: 'Enter the name of list',\n            text: 'New list will be created',\n            type: 'question',\n            input: 'text',\n            preConfirm: (result) => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (result === '') {\n                            reject('List name cannot be empty')\n                        } else if (result.length > 30) {\n                            reject('Length of list name cannot be greater than 30')\n                        }\n                        else {\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n                            headers.append('Content-Type', 'application/json');\n\n                            this.http.post(Config.api + '/ml/check_ilist_twitter/', JSON.stringify({\n                                    // name: result,\n                                    name: result,\n                                    username: this.currentUser.username\n                                }),\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                                data => {\n                                    resolve()\n\n                                },\n                                error => {\n                                    if(error.status===406){\n                                    Swal.fire('List Already Exist')\n                                    }\n                                    // reject('List named \"' + result + '\" already exists')\n\n                                });\n                        }\n                    }, 2)\n                })\n            },\n            showCancelButton: true,\n            confirmButtonText: 'Create',\n            cancelButtonText: 'Cancel'\n        }).then((result) => {\n\n\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            //alert(result.value)\n            this.http.post(Config.api + '/ml/create_add_ilist_twitter/', JSON.stringify({\n                    name: result.value,\n                    list: {},\n                    username: this.currentUser.username\n                }),\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.loadTwitterLists(this.selected_choice_twitter);\n                    Swal.fire(\n                        'List created!',\n                        result.value(),\n                        'success'\n                    )\n                    console.log('Result is..................', result.value);\n\n                },\n                // error => {\n                //     Swal.fire(\n                //         'Try again after some time!',\n                //         error.toString(),\n                //         'error'\n                //     )\n                // }\n                );\n\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'No list created :)',\n                    'success'\n                )\n            }\n        });\n    }\n    sort_lists_twitter() {\n\n        this.getTwLists(this.selected_choice_twitter);\n\n\n    }\n\n\n    sort_lists_peri() {\n\n        this.get_list_peri(this.selected_choice);\n\n\n    }\n\n    sort_lists_med() {\n\n        this.get_list_med(this.selected_choice);\n\n\n    }\n    sort_lists_fli() {\n\n        this.get_list_flkr(this.selected_choice);\n\n\n    }\n\n    //Function that add influencers in web lists.\n    select_add_influencers_twitter(id: number, name: string) {\n\n        localStorage.setItem('selected_list_twitter', JSON.stringify({id: id, name: name}));\n        this.router.navigate(['twitter/search'], {queryParams:{name: 'twitter'}});\n\n    }\n\n    go_to_list_twitter(e: number, name: string) {\n        this.router.navigate(['twitter/list/', e])\n\n    }\n\n    email_list_twitter(e: number, name: string) {\n\n\n    }\n\n    delete_list_twitter(id: number) {\n        // let dashboard = this.current_dashboard;\n        //\n        // if (dashboard === 1) {\n        //     this.delete_list(id);\n        // } else if (dashboard === 6) {\n        //     alert('blgoooooo')\n        //     this.delete_list_dd(id);\n        // } else if (dashboard === 2) {\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n        headers.append('Content-Type', 'application/json');\n        let myhttp = this.http;\n        Swal.fire({\n\n            title: 'Deleted',\n            text: 'List has been deleted successfully',\n            // title: 'Are you sure?',\n            // text: 'You will not be able to recover this list!',\n            // type: 'warning',\n            // showCancelButton: true,\n            // confirmButtonText: 'Yes, delete it!',\n            // cancelButtonText: 'No, keep it'\n        }).then(() => {\n\n            myhttp.delete(Config.api + '/ml/delete_ilist_twitter/' + id,\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.loadTwitterLists(this.selected_choice_twitter);\n\n                    // Swal.fire(\n                    //     'List Deleted!',\n                    //     '',\n                    //     'success'\n                    // )\n\n                },\n                error => {\n                    // alert('error')\n                    Swal.fire(\n                        'Try again after some time!',\n                        error.toString(),\n                        'error'\n                    )\n                });\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'Your list is not deleted :)',\n                    'error'\n                )\n            }\n        })\n    }\n\n\n\n\n\n    //Start Youtube all API's Implements by Amjad\n\n    email_list_yt(e: number, name: string) {\n        // localStorage.setItem('navigated_list',JSON.stringify({id:e,name:name}));\n        this.router.navigate(['email/settings/', e])\n    }\n    delete_list_yt(id: number) {\n\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n        headers.append('Content-Type', 'application/json');\n        let myhttp = this.http;\n        Swal.fire({\n            title: 'Deleted',\n            text: 'List has been deleted successfully',\n            // title: 'Are you sure?',\n            // text: 'You will not be able to recover this list!',\n            // type: 'warning',\n            // showCancelButton: true,\n            // confirmButtonText: 'Yes, delete it!',\n            // cancelButtonText: 'No, keep it'\n        }).then(() => {\n\n            myhttp.delete(Config.api + '/delete_ilist_yt/' + id,\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_lists_yt(this.selected_choice.replace('blog_influencer', 'youtube_influencer'));\n\n                    // Swal.fire(\n                    //     'List Deleted!',\n                    //     '',\n                    //     'success'\n                    // )\n\n                },\n                error => {\n                    // alert('error')\n                    Swal.fire(\n                        'Try again after some time!',\n                        error.toString(),\n                        'error'\n                    )\n                });\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'Your list is not deleted :)',\n                    'error'\n                )\n            }\n        })\n\n\n    }\n    sort_lists_yt() {\n        this.get_lists_yt(this.selected_choice.replace('blog_influencer', 'youtube_influencer'));\n    }\n    create_empty_list_yt() {\n\n        Swal.fire({\n            title: 'Enter the name of list',\n            text: 'New list will be created',\n            type: 'question',\n            input: 'text',\n            preConfirm: (result) => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (result === '') {\n                            reject('List name cannot be empty')\n                        } else if (result.length > 30) {\n                            reject('Length of list name cannot be greater than 30')\n                        }\n                        else {\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n                            headers.append('Content-Type', 'application/json');\n\n                            this.http.post(Config.api + '/check_ilist_yt/', JSON.stringify({\n                                    // name: result,\n                                    name: result,\n                                    username: this.currentUser.username\n                                }),\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                                data => {\n                                    resolve()\n\n                                },\n                                error => {\n                                    if(error.status===406){\n                                        Swal.fire('List Already Exist','error');\n                                    }\n                                    // reject('List named \"' + result + '\" already exists')\n\n                                });\n                        }\n                    }, 2)\n                })\n            },\n            showCancelButton: true,\n            confirmButtonText: 'Create',\n            cancelButtonText: 'Cancel'\n        }).then((result) => {\n\n\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n\n            this.http.post(Config.api + '/create_add_ilist_yt/', JSON.stringify({\n                    // name: result,\n                    name: result.value,\n                    // list: {},\n                    username: this.currentUser.username\n                }),\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_lists_yt(this.selected_choice.replace('blog_influencer', 'youtube_influencer'));\n                    Swal.fire(\n                        'List created!',\n                        result.value(),\n                        'success'\n                    )\n                    console.log('Result is..................', result.value);\n\n                },\n                // error => {\n                //     Swal.fire(\n                //         'Try again after some time!',\n                //         error.toString(),\n                //         'error'\n                //     )\n                // }\n                );\n\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'No list created :)',\n                    'success'\n                )\n            }\n        })\n    }\n    get_lists_yt(v) {\n        this.current_dashboard = 6;\n        this.loaded = false;\n        this.http.get(Config.api + '/get_iList_names_yt/' + this.currentUser.username + '/' + v + '/', null, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json();\n                this.loaded = true;\n            });\n    }\n    select_add_influencers_yt(id: number, name: string) {\n\n        localStorage.setItem('selected_list_yt', JSON.stringify({id: id, name: name, }));\n\n        this.router.navigate(['youtube/search'], {queryParams:{name: 'youtube'}})\n\n    }\n    go_to_list_yt(e: number, name: string) {\n\n        this.router.navigate(['youtube/list/', e])\n\n    }\n\n\n\n    //Start Instagram all API's Implements by Amjad\n    sort_lists_in() {\n        this.get_lists_in(this.selected_choice.replace('blog_influencer', 'instagram_influencer'));\n    }\n    create_empty_list_in() {\n\n        Swal.fire({\n            title: 'Enter the name of list',\n            text: 'New list will be created',\n            type: 'question',\n            input: 'text',\n            preConfirm: (result) => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (result === '') {\n                            reject('List name cannot be empty')\n                        } else if (result.length > 30) {\n                            reject('Length of list name cannot be greater than 30')\n                        }\n                        else {\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n                            headers.append('Content-Type', 'application/json');\n\n                            this.http.post(Config.api + '/check_ilist_in/', JSON.stringify({\n                                    // name: result,\n                                    name: result,\n                                    username: this.currentUser.username\n                                }),\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                                data => {\n                                    resolve()\n\n                                },\n                                error => {\n                                    if(error.status===406){\n                                        Swal.fire('List already exist')\n                                    }\n                                    // reject('List named \"' + result + '\" already exists')\n\n                                });\n                        }\n                    }, 1)\n                })\n            },\n            showCancelButton: true,\n            confirmButtonText: 'Create',\n            cancelButtonText: 'Cancel'\n        }).then((result) => {\n\n\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            //alert(result.value)\n            this.http.post(Config.api + '/create_add_ilist_in/', JSON.stringify({\n                    name: result.value,\n                    list: {},\n                    username: this.currentUser.username\n                }),\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_lists_in(this.selected_choice.replace('blog_influencer', 'instagram_influencer'));\n                    Swal.fire(\n                        'List created!',\n                        result.value(),\n                        'success'\n                    )\n                    console.log('Result is..................', result.value);\n\n                },\n                // error => {\n                //     Swal.fire(\n                //         'Try again after some time!',\n                //         error.toString(),\n                //         'error'\n                //     )\n                // }\n                );\n\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'No list created :)',\n                    'success'\n                )\n            }\n        })\n    }\n    get_lists_in(v) {\n        this.loaded = false;\n        this.http.get(Config.api + '/get_iList_names_in/' + this.currentUser.username + '/' + v + '/', null, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json();\n                this.loaded = true;\n            });\n    }\n    select_add_influencers_in(id: number, name: string) {\n        localStorage.setItem('selected_list_in', JSON.stringify({id: id, name: name}));\n        this.router.navigate(['instagram/search'],{queryParams:{name: 'instagram'}})\n\n    }\n    select_add_influencers_pt(id: number, name: string){\n        localStorage.setItem('selected_list_pt', JSON.stringify({id: id, name: name}));\n        this.router.navigate(['/pinterest/search'],{queryParams:{name:'pinterest'}});\n    }\n    go_to_list_in(e: number, name: string) {\n\n        this.router.navigate(['instagram/list/', e])\n\n    }\n    email_list_in(e: number, name: string) {\n        // localStorage.setItem('navigated_list',JSON.stringify({id:e,name:name}));\n        this.router.navigate(['email/settings/', e])\n    }\n    delete_list_in(id: number) {\n\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n        headers.append('Content-Type', 'application/json');\n        let myhttp = this.http;\n        Swal.fire({\n            title: 'Deleted',\n            text: 'List has been deleted successfully',\n            // title: 'Are you sure?',\n            // text: 'You will not be able to recover this list!',\n            // type: 'warning',\n            // showCancelButton: true,\n            // confirmButtonText: 'Yes, delete it!',\n            // cancelButtonText: 'No, keep it'\n        }).then(() => {\n\n            myhttp.delete(Config.api + '/delete_ilist_in/' + id,\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_lists_in(this.selected_choice.replace('blog_influencer', 'instagram_influencer'));\n\n                    // Swal.fire(\n                    //     'List Deleted!',\n                    //     '',\n                    //     'success'\n                    // )\n\n                },\n                error => {\n                    // alert('error')\n                    Swal.fire(\n                        'Try again after some time!',\n                        error.toString(),\n                        'error'\n                    )\n                });\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'Your list is not deleted :)',\n                    'error'\n                )\n            }\n        })\n\n\n    }\n\n\n\n\n    // Start Facebook  all API's Implements by Amjad\n    get_lists_fb(v){\n        this.loaded=false;\n        this.http.get(Config.api + '/get_iLists_names_fb/'+ this.currentUser.username+ '/'+ v+ '/', null, '')\n            .subscribe(res=>{\n                this.user_lists = res.json();\n                this.loaded=true;\n            });\n    }\n    select_add_influencers_fb(id: number, name:string){\n        localStorage.setItem('select_list_fb', JSON.stringify({id: id, name: name}));\n        this.router.navigate(['facebook/search'], {queryParams: {name:'facebook'}});\n    }\n    create_empty_list_fb() {\n\n        Swal.fire({\n            title: 'Enter the name of list',\n            text: 'New list will be created',\n            type: 'question',\n            input: 'text',\n            preConfirm: (result) => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (result === '') {\n                            reject('List name cannot be empty')\n                        } else if (result.length > 30) {\n                            reject('Length of list name cannot be greater than 30')\n                        }\n                        else {\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n                            headers.append('Content-Type', 'application/json');\n\n                            this.http.post(Config.api + '/check_ilist_fb/', JSON.stringify({\n                                    name: result,\n                                    // name: result,\n                                    username: this.currentUser.username\n                                }),\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                                data => {\n                                    resolve()\n\n                                },\n                                error => {\n                                    if(error.status===406){\n                                            Swal.fire('List Already Exist','error');\n                                        }\n                                    // reject('List named \"' + result + '\" already exists')\n\n                                });\n                        }\n                    }, 2)\n                })\n            },\n            showCancelButton: true,\n            confirmButtonText: 'Create',\n            cancelButtonText: 'Cancel'\n        }).then((result) => {\n\n\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            //alert(result.value)\n            this.http.post(Config.api + '/create_add_ilist_fb/', JSON.stringify({\n                    name: result.value,\n                    list: {},\n                    username: this.currentUser.username\n                }),\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_list_fb(this.selected_choice);\n                    Swal.fire(\n                        'List created!',\n                        result.value(),\n                        'success'\n                    )\n                    console.log('Result is..................', result.value);\n\n                },\n                // error => {\n                //     Swal.fire(\n                //         'Try again after some time!',\n                //         error.toString(),\n                //         'error'\n                //     )\n                // }\n                );\n\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'No list created :)',\n                    'success'\n                )\n            }\n        })\n    }\n    delete_list_fb(id: number) {\n\n\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\n        headers.append('Content-Type', 'application/json');\n        Swal.fire({\n            title: 'Deleted',\n            text: 'List has been deleted successfully',\n            // title: 'Are you Sure?',\n            // text: 'You will not be able to recover this list!',\n            // showCancelButton: true,\n            // confirmButtonText: 'Yes, delete it!',\n            // cancelButtonText: 'No, keep it'\n\n        }).then(() => {\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            this.http.delete(Config.api + '/delete_ilist_fb/' + id,\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\n                data => {\n                    this.get_list_fb(this.selected_choice);\n                    // Swal.fire(\n                    //     'List Deleted!',\n                    //     '',\n                    //     'success'\n                    // )\n                },\n                error => {\n                    // alert('error')\n                    Swal.fire(\n                        'Try again after some time!',\n                        error.toString(),\n                        'error'\n                    )\n                }\n\n\n\n            )\n        }, function (dismiss) {\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'Your list is not deleted :)',\n                    'error'\n                )\n            }\n        })\n\n\n\n        \n    }\n    go_to_list_fb(e: number, name: string) {\n\n        this.router.navigate(['facebook/list/', e])\n\n    }\n    sort_lists_fb(){\n        this.get_list_fb(this.selected_choice);\n    }\n    get_list_fb(v) {\n        this.loaded = false;\n        this.http.get(Config.api + '/get_iList_names_fb/' + this.currentUser.username + '/' + v + '/', null, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json(),\n                    this.loaded = true;\n            })\n    }\n\n\n    // Start Linkedin  all API's Implements by Amjad\n\n    // go_to_list_lnkd(e:number, name: string){\n    //     this.router.navigate(['linkedin/list/', e])\n    // }\n    // get_list_lnkd(v){\n    //     this.loaded=false;\n    //     this.http.get(Config.api+ '/get_iList_names_ld/'+ this.currentUser.username + '/'+ v + '/', null, 'small')\n    //         .subscribe(res=> {\n    //             this.user_lists= res.json();\n    //             this.loaded=true;\n    //         })\n    // }\n    // create_empty_list_lnkd() {\n\n    //     Swal.fire({\n    //         title: 'Enter the name of list',\n    //         text: 'New list will be created',\n    //         type: 'question',\n    //         input: 'text',\n    //         preConfirm: (result) => {\n    //             return new Promise((resolve, reject) => {\n    //                 setTimeout(() => {\n    //                     if (result === '') {\n    //                         reject('List name cannot be empty')\n    //                     } else if (result.length > 30) {\n    //                         reject('Length of list name cannot be greater than 30')\n    //                     }\n    //                     else {\n    //                         let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n    //                         headers.append('Content-Type', 'application/json');\n\n    //                         this.http.post(Config.api + '/check_ilist_ld/', JSON.stringify({\n    //                                 name: result,\n    //                                 username: this.currentUser.username\n    //                             }),\n    //                             {headers: headers}).map((response: Response) => response.json()).subscribe(\n    //                             data => {\n    //                                 resolve()\n\n    //                             },\n    //                             error => {\n    //                                 reject('List named \"' + result + '\" already exists')\n\n    //                             });\n    //                     }\n    //                 }, 2)\n    //             })\n    //         },\n    //         showCancelButton: true,\n    //         confirmButtonText: 'Create',\n    //         cancelButtonText: 'Cancel'\n    //     }).then((result) => {\n\n\n    //         let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n    //         headers.append('Content-Type', 'application/json');\n\n    //         this.http.post(Config.api + '/create_add_ilist_ld/', JSON.stringify({\n    //                 name: result,\n    //                 list: {},\n    //                 username: this.currentUser.username\n    //             }),\n    //             {headers: headers}).map((response: Response) => response.json()).subscribe(\n    //             data => {\n    //                 this.get_list_lnkd(this.selected_choice);\n    //                 Swal.fire(\n    //                     'List created!',\n    //                     result.value(),\n    //                     'success'\n    //                 )\n    //             },\n    //             // error => {\n    //             //     Swal.fire(\n    //             //         'Try again after some time!',\n    //             //         error.toString(),\n    //             //         'error'\n    //             //     )\n    //             // }\n    //             );\n\n    //     }, function (dismiss) {\n    //         // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n    //         if (dismiss === 'cancel') {\n    //             Swal.fire(\n    //                 'Cancelled',\n    //                 'No list created :)',\n    //                 'success'\n    //             )\n    //         }\n    //     })\n    // }\n    // sort_list_lnkd(){\n    //     this.get_list_lnkd(this.selected_choice)\n    // }\n    // select_add_influencers_lnkd(id: number, name:string){\n    //     localStorage.setItem('select_list_linkin', JSON.stringify({id: id, name: name}));\n    //     this.router.navigate(['linkedin/search'], {queryParams:{name: 'linkedIn'}})\n    // }\n    // delete_ilist_lnkd(id: number) {\n    //     let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\n    //     headers.append('Content-Type', 'application/json');\n    //     Swal.fire({\n    //         title: 'Deleted',\n    //         text: 'List has been deleted successfully',\n    //         // title: 'Are you Sure?',\n    //         // text: 'You will not be able to recover this list!',\n    //         // showCancelButton: true,\n    //         // confirmButtonText: 'Yes, delete it!',\n    //         // cancelButtonText: 'No, keep it'\n\n    //     }).then(() => {\n    //         headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n    //         headers.append('Content-Type', 'application/json');\n    //         this.http.delete(Config.api + '/delete_ilist_ld/' + id,\n    //             {headers: headers}).map((responce: Response) => responce.json()).subscribe(\n    //             data => {\n    //                 this.get_list_lnkd(this.selected_choice);\n    //                 // Swal.fire(\n    //                 //     'List Deleted!',\n    //                 //     '',\n    //                 //     'success'\n    //                 // )\n    //             },\n    //             error => {\n    //                 // alert('error')\n    //                 Swal.fire(\n    //                     'Try again after some time!',\n    //                     error.toString(),\n    //                     'error'\n    //                 )\n    //             }\n\n\n\n    //         )\n    //     }, function (dismiss) {\n    //         if (dismiss === 'cancel') {\n    //             Swal.fire(\n    //                 'Cancelled',\n    //                 'Your list is not deleted :)',\n    //                 'error'\n    //             )\n    //         }\n    //     })\n\n\n    // }\n\n\n\n    // Start BlogoSphere  all API's Implements by Amjad\n    \n    \n    \n    sort_lists_dd() {\n        this.get_lists_dd(this.selected_choice);\n    }\n    create_empty_list_dd() {\n\n        Swal.fire({\n            title: 'Enter the name of list',\n            text: 'New list will be created',\n            type: 'question',\n            input: 'text',\n            preConfirm: (result) => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (result === '') {\n                            reject('List name cannot be empty')\n                        } else if (result.length > 30) {\n                            reject('Length of list name cannot be greater than 30')\n                        }\n                        else {\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n                            headers.append('Content-Type', 'application/json');\n\n                            this.http.post(Config.api + '/check_ilist_dd/', JSON.stringify({\n                                    name: result,\n                                    // name: result,\n                                    username: this.currentUser.username\n                                }),\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                                data => {\n                                    resolve()\n\n                                },\n                                error => {\n                                    if(error.status===406){\n                                        Swal.fire('List Already Exist')\n                                    }\n                                    // reject('List named \"' + result + '\" already exists')\n\n                                });\n                        }\n                    }, 2)\n                })\n            },\n            showCancelButton: true,\n            confirmButtonText: 'Create',\n            cancelButtonText: 'Cancel'\n        }).then((result) => {\n\n\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            //alert(result.value)\n            this.http.post(Config.api + '/create_add_ilist_dd/', JSON.stringify({\n                    // name: result,\n                    name: result.value,\n                    list: {},\n                    username: this.currentUser.username\n                }),\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_lists_dd(this.selected_choice);\n                    Swal.fire(\n                        'List created!',\n                        result.value(),\n                        'success'\n                    )\n                    console.log('Result is..................', result.value);\n\n                },\n                // error => {\n                //     Swal.fire(\n                //         'Try again after some time!',\n                //         error.toString(),\n                //         'error'\n                //     )\n                // }\n                );\n\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'No list created :)',\n                    'success'\n                )\n            }\n        })\n    }\n    get_lists_dd(v) {\n        this.current_dashboard = 6;\n        this.loaded = false;\n        this.http.get(Config.api + '/get_iList_names_dd/' + this.currentUser.username + '/' + v + '/', null, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json();\n                this.loaded = true;\n            });\n    }\n    select_add_influencers_dd(id: number, name: string) {\n        localStorage.setItem('selected_list_dd', JSON.stringify({id: id, name: name}));\n        this.router.navigate(['blogosphere/search'],{queryParams: {name: 'blog'}})\n\n\n    }\n    go_to_list_dd(e: number, name: string) {\n\n        this.router.navigate(['blogosphere/list/', e])\n\n    }\n    email_list_dd(e: number, name: string) {\n        // localStorage.setItem('navigated_list',JSON.stringify({id:e,name:name}));\n        this.router.navigate(['email/settings/', e])\n    }\n    delete_list_dd(id: number) {\n\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n        headers.append('Content-Type', 'application/json');\n        let myhttp = this.http;\n        Swal.fire({\n            title: 'Deleted',\n            text: 'List has been deleted successfully',\n            // title: 'Are you sure?',\n            // text: 'You will not be able to recover this list!',\n            // type: 'warning',\n            // showCancelButton: true,\n            // confirmButtonText: 'Yes, delete it!',\n            // cancelButtonText: 'No, keep it'\n        }).then(() => {\n\n            myhttp.delete(Config.api + '/delete_ilist_dd/' + id,\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_lists_dd(this.selected_choice);\n\n                    // Swal.fire(\n                    //     'List Deleted!',\n                    //     '',\n                    //     'success'\n                    // )\n\n                },\n                error => {\n                    // alert('error')\n                    Swal.fire(\n                        'Try again after some time!',\n                        error.toString(),\n                        'error'\n                    )\n                });\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'Your list is not deleted :)',\n                    'error'\n                )\n            }\n        })\n\n\n    }\n    get_lists(v) {\n\n        this.loaded = false;\n        this.http.get(Config.api + '/get_iList_names/' + this.currentUser.username + '/' + v + '/', null, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json();\n                this.user_lists_web = res.json().results;\n                this.loaded = true;\n            });\n\n\n    }\n\n\n    // Start Pinterests  all API's Implements by Amjad\n    sort_list_pt(){\n        this.get_list_pinterest(this.selected_choice)\n    }\n    delete_ilist_pt(id: number) {\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\n        headers.append('Content-Type', 'application/json');\n        Swal.fire({\n            title: 'Deleted',\n            text: 'List has been deleted successfully',\n            // title: 'Are you Sure?',\n            // text: 'You will not be able to recover this list!',\n            // showCancelButton: true,\n            // confirmButtonText: 'Yes, delete it!',\n            // cancelButtonText: 'No, keep it'\n\n        }).then(() => {\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            this.http.delete(Config.api + '/delete_ilist_pt/' + id,\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\n                data => {\n                    this.get_list_pinterest(this.selected_choice);\n                    Swal.fire(\n                        'List Deleted!',\n                        '',\n                        'success'\n                    )\n                },\n                error => {\n                    // alert('error')\n                    Swal.fire(\n                        'Try again after some time!',\n                        // error.toString(),\n                        'error'\n                    )\n                }\n\n\n\n            )\n        }, function (dismiss) {\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'Your list is not deleted :)',\n                    'error'\n                )\n            }\n        })\n\n\n    }\n\n\n    delete_ilist_peri(id: number) {\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\n        headers.append('Content-Type', 'application/json');\n        Swal.fire({\n            title: 'Deleted',\n            text: 'List has been deleted successfully',\n            // title: 'Are you Sure?',\n            // text: 'You will not be able to recover this list!',\n            // showCancelButton: true,\n            // confirmButtonText: 'Yes, delete it!',\n            // cancelButtonText: 'No, keep it'\n\n        }).then(() => {\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            this.http.delete(Config.api + '/delete_ilist_periscope/' + id,\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\n                data => {\n                    this.get_list_peri(this.selected_choice);\n                    // Swal.fire(\n                    //     'List Deleted!',\n                    //     '',\n                    //     'success'\n                    // )\n                },\n                error => {\n                    // alert('error')\n                    Swal.fire(\n                        'Try again after some time!',\n                        error.toString(),\n                        'error'\n                    )\n                }\n\n\n\n            )\n        }, function (dismiss) {\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'Your list is not deleted :)',\n                    'error'\n                )\n            }\n        })\n\n\n    }\n    delete_ilist_med(id: number) {\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\n        headers.append('Content-Type', 'application/json');\n        Swal.fire({\n            title: 'Deleted',\n            text: 'List has been deleted successfully',\n            // title: 'Are you Sure?',\n            // text: 'You will not be able to recover this list!',\n            // showCancelButton: true,\n            // confirmButtonText: 'Yes, delete it!',\n            // cancelButtonText: 'No, keep it'\n\n        }).then(() => {\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            this.http.delete(Config.api + '/delete_ilist_md/' + id,\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\n                data => {\n                    this.get_list_med(this.selected_choice);\n                    // Swal.fire(\n                    //     'List Deleted!',\n                    //     '',\n                    //     'success'\n                    // )\n                },\n                error => {\n                    // alert('error')\n                    Swal.fire(\n                        'Try again after some time!',\n                        error.toString(),\n                        'error'\n                    )\n                }\n\n\n\n            )\n        }, function (dismiss) {\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'Your list is not deleted :)',\n                    'error'\n                )\n            }\n        })\n\n\n    }\n\n    go_to_list_pt(e: number, name: string){\n        this.router.navigate(['pinterest/list/', e])\n    }\n\n    go_to_list_peri(e: number, name: string){\n        this.router.navigate(['periscope/list/', e])\n    }\n\n    go_to_list_med(e: number, name: string){\n        this.router.navigate(['medium/list/', e])\n    }\n    go_to_list_flkr(e: number, name: string){\n        this.router.navigate(['flickr/list/', e])\n    }\n    select_add_influencers_peri(id: number, name: string){\n        localStorage.setItem('selected_list_peri', JSON.stringify({id: id, name: name}));\n        this.router.navigate(['/periscope/search'],{queryParams:{name:'periscope'}});\n    }\n\n    select_add_influencers_med(id: number, name: string){\n        localStorage.setItem('selected_list_med', JSON.stringify({id: id, name: name}));\n        this.router.navigate(['/medium/search'],{queryParams:{name:'medium'}});\n    }\n    select_add_influencers_flkr(id: number, name: string){\n        localStorage.setItem('selected_list_fl', JSON.stringify({id: id, name: name}));\n        this.router.navigate(['/flickr/search'],{queryParams:{name:'flickr'}});\n    }\n    create_empty_list_pt() {\n\n        Swal.fire({\n            title: 'Enter the name of list',\n            text: 'New list will be created',\n            type: 'question',\n            input: 'text',\n            preConfirm: (result) => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (result === '') {\n                            reject('List name cannot be empty')\n                        } else if (result.length > 30) {\n                            reject('Length of list name cannot be greater than 30')\n                        }\n                        else {\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n                            headers.append('Content-Type', 'application/json');\n\n                            this.http.post(Config.api + '/check_ilist_pt/', JSON.stringify({\n                                    // name: result,\n                                    name: result,\n                                    username: this.currentUser.username\n                                }),\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                                data => {\n                                    resolve()\n\n                                },\n                                error => {\n                                    reject('List named \"' + result + '\" already exists')\n\n                                });\n                        }\n                    }, 2)\n                })\n            },\n            showCancelButton: true,\n            confirmButtonText: 'Create',\n            cancelButtonText: 'Cancel'\n        }).then((result) => {\n\n\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            //alert(result.value)\n            this.http.post(Config.api + '/create_add_ilist_pt/', JSON.stringify({\n                    name: result.value,\n                    list: {},\n                    username: this.currentUser.username\n                }),\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_list_pinterest(this.selected_choice);\n                    Swal.fire(\n                        'List created!',\n                        result.value(),\n                        'success'\n                    )\n                    console.log('Result is..................', result.value);\n\n                },\n                // error => {\n                //     Swal.fire(\n                //         'Try again after some time!',\n                //         error.toString(),\n                //         'error'\n                //     )\n                // }\n                );\n\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'No list created :)',\n                    'success'\n                )\n            }\n        })\n    }\n    // get_list_pinterest(v) {\n    //     this.loaded=false;\n    //     this.http.get(Config.api + '/get_iList_names_pt/'+ this.currentUser.username+ '/'+ v + '/', null, 'samll')\n    //         .subscribe(res=> {\n    //             this.user_lists= res.json();\n    //             this.loaded= true;\n    //         })\n    // }\n\n    get_list_pinterest(v: string) {\n\n        this.loaded = false;\n        this.http.get(Config.api + '/get_iList_names_pt/' + this.currentUser.username + '/' + v + '/', null, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json();\n                this.loaded = true;\n            });\n\n\n    }\n\n    delete_ilist_flkr(id: number) {\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']});\n        headers.append('Content-Type', 'application/json');\n        Swal.fire({\n            title: 'Deleted',\n            text: 'List has been deleted successfully',\n            // title: 'Are you Sure?',\n            // text: 'You will not be able to recover this list!',\n            // showCancelButton: true,\n            // confirmButtonText: 'Yes, delete it!',\n            // cancelButtonText: 'No, keep it'\n\n        }).then(() => {\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            this.http.delete(Config.api + '/delete_ilist_fl/' + id,\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\n                data => {\n                    this.get_list_flkr(this.selected_choice);\n                    // Swal.fire(\n                    //     'List Deleted!',\n                    //     '',\n                    //     'success'\n                    // )\n                },\n                error => {\n                    // alert('error')\n                    Swal.fire(\n                        'Try again after some time!',\n                        error.toString(),\n                        'error'\n                    )\n                }\n            )\n        }, function (dismiss) {\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'Your list is not deleted :)',\n                    'error'\n                )\n            }\n        })\n\n    }\n\n\n        get_list_med(v) {\n\n        this.loaded = false;\n        this.http.get(Config.api + '/get_iList_names_md/' + this.currentUser.username + '/' + v + '/', null, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json();\n                this.loaded = true;\n            });\n\n\n    }\n    get_list_flkr(v) {\n\n        this.loaded = false;\n        this.http.get(Config.api + '/get_iList_names_fl/' + this.currentUser.username + '/' + v + '/', null, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json();\n                this.loaded = true;\n            });\n\n\n    }\n\n\n\n    get_list_peri(v) {\n\n        this.loaded = false;\n        this.http.get(Config.api + '/get_iList_names_periscope/' + this.currentUser.username + '/' + v + '/', null, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json();\n                this.loaded = true;\n            });\n\n\n    }\n\n\n                //Others Functions\n    loadTwitterLists(v) {\n        // this.current_dashboard = 2;\n        this.getTwLists(v);\n        // this.load_all_lists(v, this.current_dashboard);\n\n    }\n    getTwLists(v) {\n        this.current_dashboard = 2;\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n        headers.append('Content-Type', 'application/json');\n        this.loaded = false;\n        this.http.get(Config.api + '/ml/get_iList_names_twitter/' + this.currentUser.username + '/' + v + '/', {headers: headers}, 'small')\n            .subscribe(res => {\n                this.user_lists = res.json();\n                this.loaded = true;\n            });\n    }\n    selectedIndexChange(e) {\n        // if (e === 0) {\n        //     this.get_lists('-id')\n        // }\n        //  else \n         if (e === 0) {\n            this.loadTwitterLists('-id');\n        } else if (e === 1) {\n            this.get_lists_dd('-id');\n\n        } else if (e === 2) {\n            this.get_lists_yt('-id');\n\n        } else if (e === 3) {\n            this.get_lists_in('-id');\n        } else if (e === 4 ) {\n            this.get_list_fb('-id');\n        }\n        // else if(e===6){\n        //     this.get_list_lnkd('-id');\n        // }\n        else if(e===5){\n            this.get_list_pinterest('-id');\n        }\n        else if(e===6){\n            this.get_list_peri('-id');\n        }\n\n        else if(e===7){\n            this.get_list_med('-id');\n        }\n        else if(e===8){\n            this.get_list_flkr('-id');\n        }\n    }\n    openNav() {\n        document.getElementById(\"mySidenav\").style.width = \"250px\";\n    }\n\n    create_empty_list_peri() {\n\n        Swal.fire({\n            title: 'Enter the name of list',\n            text: 'New list will be created',\n            type: 'question',\n            input: 'text',\n            preConfirm: (result) => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (result === '') {\n                            reject('List name cannot be empty')\n                        } else if (result.length > 30) {\n                            reject('Length of list name cannot be greater than 30')\n                        }\n                        else {\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n                            headers.append('Content-Type', 'application/json');\n\n                            this.http.post(Config.api + '/check_ilist_periscope/', JSON.stringify({\n                                    name: result,\n                                    // name: result,\n                                    username: this.currentUser.username\n                                }),\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                                data => {\n                                    resolve()\n\n                                },\n                                error => {\n\n                                    reject('List named \"' + result + '\" already exists')\n\n                                });\n                        }\n                    }, 2)\n                })\n            },\n            showCancelButton: true,\n            confirmButtonText: 'Create',\n            cancelButtonText: 'Cancel'\n        }).then((result) => {\n\n\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            //alert(result.value)\n            this.http.post(Config.api + '/create_add_ilist_periscope/', JSON.stringify({\n                    name: result.value,\n                    list: {},\n                    username: this.currentUser.username\n                }),\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_list_peri(this.selected_choice);\n                    Swal.fire(\n                        'List created!',\n                        result.value,\n                        'success'\n                    );\n                  console.log('Result is..................', result.value);\n                },\n                // error => {\n                //     Swal.fire(\n                //         'Try again after some time!',\n                //         error.toString(),\n                //         'error'\n                //     )\n                // }\n                );\n\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'No list created :)',\n                    'success'\n                )\n            }\n        })\n    }\n    create_empty_list_med() {\n\n        Swal.fire({\n            title: 'Enter the name of list',\n            text: 'New list will be created',\n            type: 'question',\n            input: 'text',\n            preConfirm: (result) => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (result === '') {\n                            reject('List name cannot be empty')\n                        } else if (result.length > 30) {\n                            reject('Length of list name cannot be greater than 30')\n                        }\n                        else {\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n                            headers.append('Content-Type', 'application/json');\n\n                            this.http.post(Config.api + '/check_ilist_md/', JSON.stringify({\n                                    // name: result,\n                                    name: result,\n                                    username: this.currentUser.username\n                                }),\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                                data => {\n                                    resolve()\n\n                                },\n                                error => {\n                                    reject('List named \"' + result + '\" already exists')\n\n                                });\n                        }\n                    }, 2)\n                })\n            },\n            showCancelButton: true,\n            confirmButtonText: 'Create',\n            cancelButtonText: 'Cancel'\n        }).then((result) => {\n\n\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            //alert(result.value)\n            this.http.post(Config.api + '/create_add_ilist_md/', JSON.stringify({\n                    name: result.value,\n                    list: {},\n                    username: this.currentUser.username\n                }),\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_list_med(this.selected_choice);\n                    Swal.fire(\n                        'List created!',\n                        // result.value(),\n                        'success'\n                    )\n                    console.log('Result is..................', result.value);\n\n                },\n                // error => {\n                //     Swal.fire(\n                //         'Try again after some time!',\n                //         error.toString(),\n                //         'error'\n                //     )\n                // }\n                );\n\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'No list created :)',\n                    'success'\n                )\n            }\n        })\n    }\n    create_empty_list_flkr() {\n\n        Swal.fire({\n            title: 'Enter the name of list',\n            text: 'New list will be created',\n            type: 'question',\n            input: 'text',\n            preConfirm: (result) => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (result === '') {\n                            reject('List name cannot be empty')\n                        } else if (result.length > 30) {\n                            reject('Length of list name cannot be greater than 30')\n                        }\n                        else {\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n                            headers.append('Content-Type', 'application/json');\n\n                            this.http.post(Config.api + '/check_ilist_fl/', JSON.stringify({\n                                    name: result,\n                                    username: this.currentUser.username\n                                }),\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                                data => {\n                                    resolve()\n\n                                },\n                                error => {\n                                    reject('List named \"' + result + '\" already exists')\n\n                                });\n                        }\n                    }, 2)\n                })\n            },\n            showCancelButton: true,\n            confirmButtonText: 'Create',\n            cancelButtonText: 'Cancel'\n        }).then((result) => {\n\n\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\n            headers.append('Content-Type', 'application/json');\n            //alert(result.value)\n            this.http.post(Config.api + '/create_add_ilist_fl/', JSON.stringify({\n                    name: result.value,\n                    list: {},\n                    username: this.currentUser.username\n                }),\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\n                data => {\n                    this.get_list_flkr(this.selected_choice);\n                    Swal.fire(\n                        'List created!',\n                        result.value(),\n                        'success'\n                    )\n                    console.log('Result is..................', result.value);\n\n                },\n                // error => {\n                //     Swal.fire(\n                //         'Try again after some time!',\n                //         error.toString(),\n                //         'error'\n                //     )\n                // }\n                );\n\n        }, function (dismiss) {\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n            if (dismiss === 'cancel') {\n                Swal.fire(\n                    'Cancelled',\n                    'No list created :)',\n                    'success'\n                )\n            }\n        })\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport {DashboardRoutes} from \"./userdashboard.routing\";\nimport {LoaderModule} from '../loader/loader.module';\nimport {UserdashboardTemplateComponent} from \"./userdashboard-template.component\";\nimport {MatSelectModule, MatTabsModule,  MatListModule, MatTableModule,\n  MatCardModule, MatFormFieldModule, MatInputModule, MatRippleModule} from \"@angular/material\";\nimport {FormsModule} from \"@angular/forms\";\nimport {PreloaderModule} from \"../components/preloader.module\";\nimport {CdkTableModule} from '@angular/cdk/table';\n\n\n// import {} from '@angular/material';\n\n\n@NgModule({\n    imports: [CommonModule,\n        LoaderModule,RouterModule.forChild( DashboardRoutes ),FormsModule, CdkTableModule,\n      MatSelectModule, MatTabsModule,  MatListModule, MatTableModule,\n      MatCardModule, MatFormFieldModule, MatInputModule, MatRippleModule,PreloaderModule,],\n    declarations: [ UserdashboardTemplateComponent ]\n})\n\nexport class UserDashboardModule {\n\n}\n","import { Routes } from '@angular/router';\nimport {UserdashboardTemplateComponent} from \"./userdashboard-template.component\";\n\n// import { TaskboardComponent } from './taskboard.component';\n\nexport const DashboardRoutes: Routes = [{\n    path: '',\n    component: UserdashboardTemplateComponent,\n    data: {\n        heading: 'Dashboard',\n        // removeFooter: true\n    }\n}];\n"],"sourceRoot":""}